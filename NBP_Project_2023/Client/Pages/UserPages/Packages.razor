@page "/packages"
@inject ApplicationState AppState
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@using NBP_Project_2023.Shared

@if(showSentPackages)
{
    <PageTitle>Poslate pošiljke</PageTitle>
    <h3>Poslate pošiljke</h3>
    <br />
    <button @onclick=TogglePackageGroup>Prikaži pošiljke</button>
}
else
{
    <PageTitle>Pošiljke</PageTitle>
    <h3>Pošiljke</h3>
    <br />
    <button @onclick=TogglePackageGroup>Prikaži poslate pošiljke</button>
}

<br />

<div>
    <table>
        <thead>
            <tr>
                <th>Broj za praćenje paketa</th>
                <th>Sadržaj paketa</th>
                <th>Očekivano vreme isporuke</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Package package in packages)
            {
                <tr>
                    <td>@package.PackageID</td>
                    <td>@package.Content</td>
                    <td>@package.EstimatedArrivalDate</td>
                    <td>
                        <button @onclick="() => GetPackageDetails(package.PackageID)">Detaljnije o pošiljci</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>



@code {
    public bool showSentPackages = false;

    private string api_url = string.Empty;

    private List<Package> packages = new();

    protected override Task OnInitializedAsync()
    {
        if (AppState.AccountType != AccountTypeEnum.User || AppState.UserAccount == null)
        {
            NavManager.NavigateTo("/login/user");
        }

        api_url = $"/api/Package/GetPackages/{AppState.UserAccount!.Email}";
        GetPackages();
        return base.OnInitializedAsync();
    }

    private void TogglePackageGroup()
    {
        if(showSentPackages)
        {
            api_url = $"/api/Package/GetPackages/{AppState.UserAccount!.Email}";
        }
        else
        {
            api_url = $"/api/Package/GetSentPackages/{AppState.UserAccount!.Email}";
        }
        showSentPackages = !showSentPackages;

        GetPackages();
    }

    private async void GetPackages()
    {
        packages.Clear();

        var response = await HttpClient.GetAsync(api_url);

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadFromJsonAsync<List<Package>>();
            if(content != null && content.Count > 0)
            {
                packages.AddRange(content);
            }
        }
        StateHasChanged();
    }

    private void GetPackageDetails(string id)
    {
        NavManager.NavigateTo($"packages/details/{id}");
    }
}
