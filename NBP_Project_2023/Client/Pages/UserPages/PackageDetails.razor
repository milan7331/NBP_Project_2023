@page "/packages/details/{packageID}"
@inject ApplicationState AppState
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@using NBP_Project_2023.Shared

<PageTitle>Detalji pošiljke</PageTitle>

<h3>Detalji pošiljke</h3>

<div>
    @if (packageID == string.Empty || AppState.AccountType == AccountTypeEnum.NoAccount)
    {
        <span>Detalji pošiljke ne mogu biti učitani došlo je do greške!</span>
    }
    else
    {
        if(package != null)
        {
            <div>
                <h5>Identifikacioni broj paketa: </h5> <h6>@package.PackageID</h6>
            </div>

            <div>
                <h5>Sadržaj: </h5> <h6>@package.Content</h6>
            </div>

            <div>
                <h5>Opis: </h5> <h6>@package.Description</h6>
            </div>

            <div>
                <h5>Težina (kg): </h5> <h6>@package.Weight</h6>
            </div>

            <div>
                <h5>Cena (rsd): </h5> <h6>@package.Price</h6>
            </div>

            <div>
                <h5>E-pošta pošiljaoca: </h5> <h6>@package.SenderEmail</h6>
            </div>

            <div>
                <h5>E-pošta primaoca: </h5> <h6>@package.ReceiverEmail</h6>
            </div>

            <div>
                <h5>Status pošiljke:</h5> <h6>@package.PackageStatus</h6>
            </div>

            <div>
                <h5>Očekivano vreme prispeća: </h5> <h6>@package.EstimatedArrivalDate.ToShortDateString()</h6>
            </div>
        }
        else if (@message != string.Empty)
        {
            <span>@message</span>
        }
        else
        {
            <span>Učitavanje...</span>
        }
        <br />
        <NavLink @onclick=ReturnToPackges>Nazad na pošiljke</NavLink>
    }
</div>

@code {
    [Parameter]
    public string packageID { get; set; } = string.Empty;

    private Package? package { get; set; }

    private string message = string.Empty;

    protected override Task OnParametersSetAsync()
    {
        switch(AppState.AccountType)
        {
            case AccountTypeEnum.NoAccount:
                NavManager.NavigateTo("/");
                break;

            case AccountTypeEnum.User:
                if (AppState.UserAccount == null || packageID == string.Empty)
                    NavManager.NavigateTo("/packages");
                break;

            case AccountTypeEnum.Courier:
                if (AppState.Courier == null || packageID == string.Empty)
                NavManager.NavigateTo("/dashboard");
                break;

        }
        LoadPackageDetails(packageID);
        return base.OnParametersSetAsync();
    }

    private async void LoadPackageDetails(string id)
    {
        message = string.Empty;

        var response = await HttpClient.GetAsync($"/api/Package/GetPackage/{id}");

        if(response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadFromJsonAsync<Package>();
            if(content != null)
            {
                package = content;
            }
        }
        else
        {
            message = "Došlo je do greške! Detalji pošiljke nisu dostupni!";
        }
        StateHasChanged();
    }

    private void ReturnToPackges()
    {
        if(AppState.AccountType == AccountTypeEnum.User)
        {
            NavManager.NavigateTo("/packages");
        }
        if(AppState.AccountType == AccountTypeEnum.Courier)
        {
            NavManager.NavigateTo("/dashboard");
        }
    }
}
