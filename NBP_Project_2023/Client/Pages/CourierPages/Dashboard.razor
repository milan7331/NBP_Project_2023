@page "/dashboard"
@inject ApplicationState AppState
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@implements IDisposable
@using NBP_Project_2023.Shared
@using Newtonsoft.Json

<PageTitle>Dashboard</PageTitle>
<h3>Dashboard</h3>
<br />
@if(AppState.Courier!.CourierStatus == CourierState.Away.ToString())
{
    <button @onclick=ToggleCourierShift>Započni smenu</button>
}
else
{
    <button @onclick=GetCourierPackages>
        @if (collectionPackages.Count < 1 || deliveryPackages.Count < 1)
        {
            <span>Učitaj pošiljke</span>
        }
        else
        {
            <span>Osveži prikaz</span>
        }
    </button>
    <button @onclick=ToggleCourierShift>Završi smenu</button>
    
    <br />
    @if(message != string.Empty)
    {
        <span>@message</span>
        <br />
    }


    @if(collectionPackages.Count > 0)
    {
        <div>
        <h3>Pošiljke koje treba pokupiti</h3>
            <table>
                <thead>
                    <tr>
                        <th>Sadržaj</th>
                        <th>ID pošiljke</th>
                        <th>Status pošiljke</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Package package in collectionPackages)
                    {
                        <tr>
                            <td>@package.PackageID</td>
                            <td>@package.PackageStatus</td>
                            <td>@package.Content</td>
                            <td>
                                <button @onclick="() => GetPackageDetails(package.PackageID)">Detaljnije o pošiljci</button>
                            </td>
                            <td>
                                <button @onclick="() => ProcessPackage(package)">
                                    @switch (package.PackageStatus)
                                    {
                                        case "WaitingForPickup":
                                            <span>Pokupi paket od pošiljaoca</span>
                                            break;

                                        case "BeingDeliveredToPostOffice":
                                            <span>Dostavi paket u poštu</span>
                                            break;

                                        case "AtPostOffice":
                                            <span>Pokupi paket iz pošte</span>
                                            break;

                                        case "BeingDeliveredToDestination":
                                            <span>Dostavi paket pošiljaocu</span>
                                            break;

                                        default:
                                            break;
                                    }
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    @if (deliveryPackages.Count > 0)
    {
        <div>
            <h3>Pošiljke koje treba isporučiti</h3>
            <table>
                <thead>
                    <tr>
                        <th>ID pošiljke</th>
                        <th>Status pošiljke</th>
                        <th>Sadržaj</th>
                        <th></th>
                        <th></th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (Package package in deliveryPackages)
                    {
                        <tr>
                            <td>@package.PackageID</td>
                            <td>@package.PackageStatus</td>
                            <td>@package.Content</td>
                            <td>
                                <button @onclick="() => GetPackageDetails(package.PackageID)">Detaljnije o pošiljci</button>
                            </td>
                            <td>
                                <button @onclick="() => ProcessPackage(package)">
                                    @switch (package.PackageStatus)
                                    {
                                        case "WaitingForPickup":
                                            <span>Pokupi paket od pošiljaoca</span>
                                            break;

                                        case "BeingDeliveredToPostOffice":
                                            <span>Dostavi paket u poštu</span>
                                            break;

                                        case "AtPostOffice":
                                            <span>Pokupi paket iz pošte</span>
                                            break;

                                        case "BeingDeliveredToDestination":
                                            <span>Dostavi paket pošiljaocu</span>
                                            break;

                                        default:
                                            break;
                                    }
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

}

@code {
    private List<Package> collectionPackages = new();
    private List<Package> deliveryPackages = new();
    private string message = string.Empty;


    protected override Task OnInitializedAsync()
    {
        if (AppState.AccountType != AccountTypeEnum.Courier || AppState.Courier == null)
        {
            NavManager.NavigateTo("/login/courier");
        }
        AppState.OnStateChange += StateHasChanged;
        return base.OnInitializedAsync();
    }

    private async void ToggleCourierShift()
    {
        Courier courier = AppState.Courier!;
        if(courier.CourierStatus == CourierState.Away.ToString())
        {
            courier.CourierStatus = CourierState.Available.ToString();
        }
        else
        {
            courier.CourierStatus = CourierState.Away.ToString();
        }

        var response = await HttpClient.PutAsJsonAsync("/api/Courier/EditCourier", courier);

        if(response.IsSuccessStatusCode)
        {
            AppState.ChangeCourierStatus(courier);
        }

    }

    private async Task GetCourierPackages()
    {
        var response = await HttpClient.GetAsync($"/api/Package/GetCourierPackageList/{AppState.Courier!.Id}");

        if(response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<CourierPackagesResponse>();

            if(result != null)
            {
                if(result.CollectionPackages.Count > 0)
                {
                    collectionPackages.Clear();
                    collectionPackages.AddRange(result.CollectionPackages);
                }

                if(result.DeliveryPackages.Count > 0)
                {
                    deliveryPackages.Clear();
                    deliveryPackages.AddRange(result.DeliveryPackages);
                }
            }
        }

        StateHasChanged();
    }

    private void GetPackageDetails(string id)
    {
        NavManager.NavigateTo($"packages/details/{id}");
    }

    private async void ProcessPackage(Package pkg)
    {
        string url = string.Empty;

        switch (pkg.PackageStatus)
        {
            case "WaitingForPickup":
                url = $"/api/Courier/PickupPackageFromSender/{pkg.PackageID}";
                break;

            case "BeingDeliveredToPostOffice":
                url = $"/api/Courier/DeliverPackageToPostOffice/{pkg.PackageID}";
                break;

            case "AtPostOffice":
                url = $"/api/Courier/PickupPackageFromPostOffice/{pkg.PackageID}";
                break;

            case "BeingDeliveredToDestination":
                url = $"/api/Courier/DeliverPackageToDestination/{pkg.PackageID}";
                break;

            default:
                break;
        }
        if(url != string.Empty)
        {
            var response = await HttpClient.GetAsync(url);

            if (response.IsSuccessStatusCode)
            {
                await GetCourierPackages();
                message = string.Empty;
            }
            else
            {
                message = "Pažnja došlo je do greške!";
                StateHasChanged();
            }
        }
    }

    public void Dispose()
    {
        AppState.OnStateChange -= StateHasChanged;
    }

    public class CourierPackagesResponse
    {
        public List<Package> CollectionPackages { get; set; } = new();
        public List<Package> DeliveryPackages { get; set; } = new();
    }
}
